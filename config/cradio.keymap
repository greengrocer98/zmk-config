// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        right_bracket {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <2 3>;
            layers = <0>;
        };

        left_bracket {
            bindings = <&kp LS(LEFT_PARENTHESIS)>;
            key-positions = <6 7>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            layers = <0>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 17>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <22 23>;
            layers = <0>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R            &kp T               &kp Y      &kp U       &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F            &kp G               &kp H      &kp J       &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V            &kp B               &kp N      &kp M       &kp COMMA  &kp DOT  &kp FSLH
                     &mt LCTRL ENTER  &mt LSHIFT SPACE    &lt 2 ESC  &lt 1 BSPC
            >;
        };

        right_layer {
            bindings = <
&kp NUMBER_6  &kp N7     &kp N8  &kp N9           &kp N0                  &kp K_MUTE      &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp PRINTSCREEN  &kp INS
&kp N1        &kp N2     &kp N3  &kp N4           &kp N5                  &kp LEFT_ARROW  &kp DOWN_ARROW     &kp UP_ARROW     &kp RIGHT_ARROW  &kp DEL
&caps_word    &kp EQUAL  &kp N8  &kp N9           &kp N0                  &kp HOME        &kp PAGE_DOWN      &kp PAGE_UP      &kp END          &kp BACKSLASH
                                 &mt LCTRL ENTER  &mt LSHIFT BACKSPACE    &trans          &trans
            >;
        };

        left_layer {
            bindings = <
&trans    &kp LBKT  &kp LBRC  &kp RBRC  &trans       &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH  &kp GRAVE
&trans    &trans    &trans    &trans    &trans       &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE  &trans
                              &trans    &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
